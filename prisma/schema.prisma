generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @unique
  email String @unique

  File    File[]
  Message Message[]
  Course  Course[]
  games Game[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  fileType String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}


model Course {
  id   String @id @default(cuid())
  name String
  image String
  units Unit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Unit {
  id   String @id @default(cuid())
  name String
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course?    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id String @id @default(cuid())
  unitId String

  name String
  youtubeSearchQuery String
  videoId String?
  summary String? @db.VarChar(3000)
  unit Unit? @relation(fields: [unitId], references: [id])
  questions Question[]

  @@index([unitId], name: "unitId")
}

model Question {
  id String @id @default(cuid())
  chapterId String

  question String @db.VarChar(3000)
  answer String @db.VarChar(3000)
  options String @db.VarChar(3000)
  chapter Chapter? @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}


enum GameType {
  multiple_choice
  open_ended
}

model Game {
  id          String     @id @default(cuid())
  userId      String
  questions   QuizQuestion[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model topic_count {
  id    String @id @default(cuid())
  topic String @unique
  count Int
}

model QuizQuestion {
  id                String   @id @default(cuid())
  question          String
  answer            String
  gameId            String
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?

  game Game @relation(fields: [gameId], references: [id])

  @@index([gameId])
}