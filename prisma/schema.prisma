generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     String      @id @unique
  email                  String      @unique
  stripeCustomerId       String?     @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?     @unique @map("stripe_subscription_id")
  stripePriceId          String?     @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?   @map("stripe_current_period_end")
  File                   File[]
  Message                Message[]
  Course                 Course[]
  games                  Game[]
  Flashcard              Flashcard[]
}

model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  fileType     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String?
  messages     Message[]
  User         User?        @relation(fields: [userId], references: [id])
}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  fileId        String?
  User          User?    @relation(fields: [userId], references: [id])
  File          File?    @relation(fields: [fileId], references: [id])
}

model Course {
  id        String   @id @default(cuid())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  units     Unit[]
  User      User?    @relation(fields: [userId], references: [id])
}

model Unit {
  id        String    @id @default(cuid())
  name      String
  courseId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Course    Course?   @relation(fields: [courseId], references: [id])
  chapters  Chapter[]

  @@index([courseId], map: "courseId")
}

model Chapter {
  id                 String     @id @default(cuid())
  unitId             String
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    @db.VarChar(3000)
  unit               Unit?      @relation(fields: [unitId], references: [id])
  questions          Question[]

  @@index([unitId], map: "unitId")
}

model Question {
  id        String   @id @default(cuid())
  chapterId String
  question  String   @db.VarChar(3000)
  answer    String   @db.VarChar(3000)
  options   String   @db.VarChar(3000)
  chapter   Chapter? @relation(fields: [chapterId], references: [id])

  @@index([chapterId], map: "chapterId")
}

model Game {
  id          String         @id @default(cuid())
  userId      String
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  questions   QuizQuestion[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model topic_count {
  id    String @id @default(cuid())
  topic String @unique
  count Int
}

model QuizQuestion {
  id                String   @id @default(cuid())
  question          String
  answer            String
  gameId            String
  options           Json?
  percentageCorrect Float?
  isCorrect         Boolean?
  questionType      GameType
  userAnswer        String?
  game              Game     @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

model Flashcard {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  userId     String
  topic      String
  title      String
  flashcards FlashcardItem[]
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FlashcardItem {
  id          String    @id @default(cuid())
  flashcardId String
  frontText   String
  backText    String
  Flashcard   Flashcard @relation(fields: [flashcardId], references: [id])

  @@index([flashcardId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum GameType {
  multiple_choice
  open_ended
}
